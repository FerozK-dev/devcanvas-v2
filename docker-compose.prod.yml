services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    image: ghcr.io/feroz-dev/devcanvas_v2-devcanvas-api:${TAG}
    # build:
    #   context: ./devcanvas-api
    #   dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - STORAGE_TYPE=${STORAGE_TYPE}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - NODE_ENV: production
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    image: ghcr.io/ferozk-dev/devcanvas_v2-devcanvas-frontend:${TAG}
    # build:
    #   context: ./devcanvas-frontend
    #   dockerfile: Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    depends_on:
      - backend

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
