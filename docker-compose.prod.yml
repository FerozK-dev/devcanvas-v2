version: '3.8'

services:
  traefik:
    image: traefik:v3.3.3
    command:
      - "--configFile=/app/configs/traefik.toml"
    volumes:
      - ./traefik/traefik.toml:/app/configs/traefik.toml:ro
      - ./traefik/dynamic_conf.toml:/app/configs/dynamic_conf.toml:ro
      - ./traefik/certs:/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.devcanvas.live`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=le"

  nginx:
    image: ghcr.io/ferozk-dev/devcanvas_v2-nginx:${TAG:-latest}
    command: /bin/sh -c /etc/nginx/init-prod.sh
    networks:
      - app_network
    depends_on:
      - traefik
      - backend
      - ai-service
    environment:
      - SERVER_UI_NAME=devcanvas.live
      - CSP_DOMAIN=*.devcanvas.live
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`devcanvas.live`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=le"
      - "traefik.http.services.frontend.loadbalancer.server.port=8904"

  backend:
    image: ghcr.io/ferozk-dev/devcanvas_v2-backend:${TAG:-latest}
    networks:
      - app_network
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - AI_SERVICE_URL=http://ai-service:5000
      - JWT_SECRET=${JWT_SECRET}
      - STORAGE_TYPE=${STORAGE_TYPE}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - NODE_ENV=${NODE_ENV}
      - SITE_URL=${SITE_URL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`backend.devcanvas.live`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=le"
      - "traefik.http.services.api.loadbalancer.server.port=3000"

  ai-service:
    image: ghcr.io/ferozk-dev/devcanvas_v2-ai-service:${TAG:-latest}
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai.rule=Host(`ai.devcanvas.live`) || PathPrefix(`/ai`)"
      - "traefik.http.routers.ai.entrypoints=websecure"
      - "traefik.http.routers.ai.tls.certresolver=le"
      - "traefik.http.services.ai.loadbalancer.server.port=5000"

  postgres:
    image: postgres:15
    networks:
      - app_network
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app_network:
    name: devcanvas_network
    driver: bridge

volumes:
  postgres_data:
    external: true