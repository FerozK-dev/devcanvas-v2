services:
  traefik:
    image: traefik:v3.3.3
    command:
      - "--configFile=/app/configs/traefik.toml"
    volumes:
      - ./traefik/traefik.toml:/app/configs/traefik.toml:ro
      - ./traefik/dynamic_conf.toml:/app/configs/dynamic_conf.toml:ro
      - ./traefik/certs:/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"
    environment:
      - TZ=Europe/Helsinki
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(`postgres.localhost`)"
      - "traefik.http.routers.postgres.entrypoints=websecure"
      - "traefik.http.routers.postgres.tls=true"
      - "traefik.http.services.postgres.loadbalancer.server.port=5432"
    networks:
      - app-network

  backend:
    image: ghcr.io/${{ env.LOWERCASE_OWNER }}/devcanvas_v2-devcanvas-api:${TAG}
    # build:
    #   context: ./devcanvas-api
    #   dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - STORAGE_TYPE=${STORAGE_TYPE}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - NODE_ENV: production
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`backend.localhost`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"

  frontend:
    image: ghcr.io/${{ env.LOWERCASE_OWNER }}/devcanvas_v2-devcanvas-frontend:${TAG}
    # build:
    #   context: ./devcanvas-frontend
    #   dockerfile: Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3001"

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
