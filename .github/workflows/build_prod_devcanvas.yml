name: Production Deployment CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}
  TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Convert owner to lowercase
      shell: bash
      run: |
        LOWERCASE_OWNER=$(echo "${{ env.REPO_OWNER }}" | tr '[:upper:]' '[:lower:]')
        echo "LOWERCASE_OWNER=$LOWERCASE_OWNER" >> $GITHUB_ENV
        echo "POSTGRES_VERSION=15" >> $GITHUB_ENV
        echo "NODE_ENV=production" >> $GITHUB_ENV

    - name: Set image names
      shell: bash
      run: |
        echo "BACKEND_IMAGE=${{ env.LOWERCASE_OWNER }}/devcanvas_v2-devcanvas-api" >> $GITHUB_ENV
        echo "FRONTEND_IMAGE=${{ env.LOWERCASE_OWNER }}/devcanvas_v2-devcanvas-frontend" >> $GITHUB_ENV
        echo "AI_SERVICE_IMAGE=${{ env.LOWERCASE_OWNER }}/devcanvas_v2-ai-service" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v3
      with:
        context: ./devcanvas-api
        file: ./devcanvas-api/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
        push: ${{ github.event_name == 'push' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend
      uses: docker/build-push-action@v3
      with:
        context: ./devcanvas-frontend
        file: ./devcanvas-frontend/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
        push: ${{ github.event_name == 'push' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push AI service
      uses: docker/build-push-action@v3
      with:
        context: ./ai-service
        file: ./ai-service/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.AI_SERVICE_IMAGE }}:${{ env.TAG }}
          ${{ env.REGISTRY }}/${{ env.AI_SERVICE_IMAGE }}:latest
        push: ${{ github.event_name == 'push' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        script: |
          set -e

          # Create deployment directory
          mkdir -p ~/deployments/devcanvas
          cd ~/deployments/devcanvas

          # Create environment file
          cat << EOF > .env
          DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}?schema=public
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          STORAGE_TYPE=cloud
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          AI_SERVICE_URL=http://ai-service:8000
          GHCR_OWNER=${{ env.LOWERCASE_OWNER }}
          TAG=${{ env.TAG }}
          POSTGRES_VERSION=15
          NODE_ENV=production
          EOF

          docker pull ghcr.io/${{ env.LOWERCASE_OWNER }}/devcanvas-config:latest
          docker create --name config-container ghcr.io/${{ env.LOWERCASE_OWNER }}/devcanvas-config:latest
          docker cp config-container:/docker-compose.prod.yml .
          docker rm config-container

          # Pull images with retry
          docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ env.TAG }} || \
            (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ env.TAG }})

          docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ env.TAG }} || \
            (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ env.TAG }})

          docker pull ${{ env.REGISTRY }}/${{ env.AI_SERVICE_IMAGE }}:${{ env.TAG }} || \
            (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ env.AI_SERVICE_IMAGE }}:${{ env.TAG }})

          # Deploy with zero-downtime
          export COMPOSE_PROJECT_NAME=devcanvas_prod
          docker-compose -f docker-compose.prod.yml down --remove-orphans
          docker-compose -f docker-compose.prod.yml up -d --build

          # Verify deployment
          # until docker-compose -f docker-compose.prod.yml exec -T backend curl --fail http://localhost:3000/health; do
          #   echo "Waiting for backend to be healthy..."
          #   sleep 10
          # done

          # until docker-compose -f docker-compose.prod.yml exec -T ai-service curl --fail http://localhost:8000/health; do
          #   echo "Waiting for AI service to be healthy..."
          #   sleep 10
          # done

          # Cleanup
          docker system prune -af --filter "label!=com.docker.compose.project=devcanvas_prod"
