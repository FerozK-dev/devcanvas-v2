name: Production Deployment CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      ref:
        description: 'Branch, tag, or SHA to deploy'
        required: true
        default: 'master'
      skip_build:
        description: 'Skip build step?'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}
  TAG: ${{ github.sha || inputs.ref }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Sanitize environment variables
      id: sanitize
      run: |
        REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
        echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        echo "IMAGE_PREFIX=$REPO_OWNER/devcanvas_v2" >> $GITHUB_ENV

    - name: Build and push Frontend
      id: build_frontend
      uses: docker/build-push-action@v3
      with:
        context: ./devcanvas-frontend
        file: ./devcanvas-frontend/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:${{ env.SHORT_SHA }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:latest
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Backend
      id: build_backend
      uses: docker/build-push-action@v3
      with:
        context: ./devcanvas-api
        file: ./devcanvas-api/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:${{ env.SHORT_SHA }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:latest
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push AI Service
      id: build_ai
      uses: docker/build-push-action@v3
      with:
        context: ./ai-service
        file: ./ai-service/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-ai-service:${{ env.SHORT_SHA }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-ai-service:latest
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Frontend Assets
      run: |
        cd devcanvas-frontend
        npm install
        npm run build
        mkdir -p ../nginx/build
        cp -R build/* ../nginx/build/

    - name: Build and push Nginx
      uses: docker/build-push-action@v3
      with:
        context: ./nginx
        file: ./nginx/Dockerfile
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-nginx:${{ env.SHORT_SHA }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-nginx:latest
        build-args: |
          FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:${{ env.SHORT_SHA }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # deploy:
  #   needs: build
  #   if: |
  #     github.event_name == 'push' ||
  #     (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Deploy to DigitalOcean
  #     uses: appleboy/ssh-action@v0.1.10
  #     with:
  #       host: ${{ secrets.DO_HOST }}
  #       username: ${{ secrets.DO_USERNAME }}
  #       key: ${{ secrets.DO_SSH_KEY }}
  #       script: |
  #         set -e

  #         # Authenticate with GHCR
  #         echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

  #         mkdir -p ~/deployments/devcanvas
  #         cd ~/deployments/devcanvas

  #         # Get compose file
  #         docker run -d --name config-container ghcr.io/${{ needs.build.outputs.lowercase_owner }}/devcanvas-config:latest
  #         docker cp config-container:/docker-compose.prod.yml .
  #         docker stop config-container
  #         docker rm config-container

  #         cat << EOF > .env
  #         DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}?schema=public
  #         JWT_SECRET=${{ secrets.JWT_SECRET }}
  #         STORAGE_TYPE=cloud
  #         CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
  #         CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
  #         CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
  #         AI_SERVICE_URL=http://ai-service:8000
  #         GHCR_OWNER=${{ needs.build.outputs.lowercase_owner }}
  #         TAG=${{ env.TAG }}
  #         POSTGRES_VERSION=15
  #         NODE_ENV=production
  #         EOF

  #         docker pull ghcr.io/${{ needs.build.outputs.lowercase_owner }}/devcanvas-config:latest
  #         docker create --name config-container ghcr.io/${{ needs.build.outputs.lowercase_owner }}/devcanvas-config:latest
  #         docker cp config-container:/docker-compose.prod.yml .
  #         docker rm config-container

  #         # Pull application images
  #         docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.backend_image }}:${{ env.TAG }} || \
  #           (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.backend_image }}:${{ env.TAG }})

  #         docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.frontend_image }}:${{ env.TAG }} || \
  #           (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.frontend_image }}:${{ env.TAG }})

  #         docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.ai_service_image }}:${{ env.TAG }} || \
  #           (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.ai_service_image }}:${{ env.TAG }})

  #         # Deploy
  #         export COMPOSE_PROJECT_NAME=devcanvas_prod
  #         docker-compose -f docker-compose.prod.yml down --remove-orphans
  #         docker-compose -f docker-compose.prod.yml up -d --build

  #         # Cleanup
  #         docker system prune -af --filter "label!=com.docker.compose.project=devcanvas_prod"