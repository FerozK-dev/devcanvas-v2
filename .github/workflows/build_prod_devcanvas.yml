name: Production Deployment CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ format('{0}/{1}', toLower(github.repository_owner), 'devcanvas_v2-devcanvas-api') }}
  FRONTEND_IMAGE: ${{ format('{0}/{1}', toLower(github.repository_owner), 'devcanvas_v2-devcanvas-frontend') }}
  TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v3
      with:
        context: ./devcanvas-api
        file: ./devcanvas-api/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
        push: ${{ github.event_name == 'push' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend
      uses: docker/build-push-action@v3
      with:
        context: ./devcanvas-frontend
        file: ./devcanvas-frontend/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
        push: ${{ github.event_name == 'push' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    if: github.event_name == 'push'  # Only deploy on direct pushes to master
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        script: |
          set -e  # Exit immediately on error

          # Pull latest images with retry
          docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ env.TAG }} || \
            (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ env.TAG }})

          docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ env.TAG }} || \
            (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ env.TAG }})

          # Create environment file
          cat << EOF > .env
          DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}?schema=public
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          STORAGE_TYPE=cloud
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          GHCR_OWNER=ferozk-dev
          TAG=${{ env.TAG }}
          EOF

          # Update containers with zero-downtime approach
          docker-compose -f docker-compose.prod.yml up -d --scale backend=2 --no-recreate
          sleep 30  # Wait for new containers to initialize
          docker-compose -f docker-compose.prod.yml stop backend=1

          # Cleanup old containers and images
          docker system prune -af --volumes