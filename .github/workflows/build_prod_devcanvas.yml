name: Production Deployment CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # Add this for manual triggering
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      ref:
        description: 'Branch, tag, or SHA to deploy'
        required: true
        default: 'master'
      skip_build:
        description: 'Skip build step?'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}
  TAG: ${{ github.sha || inputs.ref }}

jobs:
  build:
    # Add condition to skip build if requested
    if: ${{ !inputs.skip_build || github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      lowercase_owner: ${{ steps.set_vars.outputs.lowercase_owner }}
      backend_image: ${{ steps.set_vars.outputs.backend_image }}
      frontend_image: ${{ steps.set_vars.outputs.frontend_image }}
      ai_service_image: ${{ steps.set_vars.outputs.ai_service_image }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Convert owner to lowercase
      shell: bash
      run: |
        LOWERCASE_OWNER=$(echo "${{ env.REPO_OWNER }}" | tr '[:upper:]' '[:lower:]')
        echo "LOWERCASE_OWNER=$LOWERCASE_OWNER" >> $GITHUB_ENV
        echo "POSTGRES_VERSION=15" >> $GITHUB_ENV
        echo "NODE_ENV=production" >> $GITHUB_ENV

    - name: Set variables
      id: set_vars
      shell: bash
      run: |
        LOWERCASE_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "lowercase_owner=$LOWERCASE_OWNER" >> $GITHUB_OUTPUT
        echo "backend_image=$LOWERCASE_OWNER/devcanvas_v2-devcanvas-api" >> $GITHUB_OUTPUT
        echo "frontend_image=$LOWERCASE_OWNER/devcanvas_v2-devcanvas-frontend" >> $GITHUB_OUTPUT
        echo "ai_service_image=$LOWERCASE_OWNER/devcanvas_v2-ai-service" >> $GITHUB_OUTPUT
        echo "LOWERCASE_OWNER=$LOWERCASE_OWNER" >> $GITHUB_ENV

    - name: Set image names
      shell: bash
      run: |
        echo "BACKEND_IMAGE=${{ env.LOWERCASE_OWNER }}/devcanvas_v2-devcanvas-api" >> $GITHUB_ENV
        echo "FRONTEND_IMAGE=${{ env.LOWERCASE_OWNER }}/devcanvas_v2-devcanvas-frontend" >> $GITHUB_ENV
        echo "AI_SERVICE_IMAGE=${{ env.LOWERCASE_OWNER }}/devcanvas_v2-ai-service" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v3
      with:
        context: ./devcanvas-api
        file: ./devcanvas-api/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
        push: ${{ github.event_name == 'push' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend
      uses: docker/build-push-action@v3
      with:
        context: ./devcanvas-frontend
        file: ./devcanvas-frontend/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
        push: ${{ github.event_name == 'push' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push AI service
      uses: docker/build-push-action@v3
      with:
        context: ./ai-service
        file: ./ai-service/Dockerfile.prod
        tags: |
          ${{ env.REGISTRY }}/${{ env.AI_SERVICE_IMAGE }}:${{ env.TAG }}
          ${{ env.REGISTRY }}/${{ env.AI_SERVICE_IMAGE }}:latest
        push: ${{ github.event_name == 'push' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # deploy:
  #   needs: build
  #   if: |
  #     github.event_name == 'push' ||
  #     (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Deploy to DigitalOcean
  #     uses: appleboy/ssh-action@v0.1.10
  #     with:
  #       host: ${{ secrets.DO_HOST }}
  #       username: ${{ secrets.DO_USERNAME }}
  #       key: ${{ secrets.DO_SSH_KEY }}
  #       script: |
  #         set -e

  #         # Authenticate with GHCR
  #         echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

  #         mkdir -p ~/deployments/devcanvas
  #         cd ~/deployments/devcanvas

  #         # Get compose file
  #         docker run -d --name config-container ghcr.io/${{ needs.build.outputs.lowercase_owner }}/devcanvas-config:latest
  #         docker cp config-container:/docker-compose.prod.yml .
  #         docker stop config-container
  #         docker rm config-container

  #         cat << EOF > .env
  #         DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}?schema=public
  #         JWT_SECRET=${{ secrets.JWT_SECRET }}
  #         STORAGE_TYPE=cloud
  #         CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
  #         CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
  #         CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
  #         AI_SERVICE_URL=http://ai-service:8000
  #         GHCR_OWNER=${{ needs.build.outputs.lowercase_owner }}
  #         TAG=${{ env.TAG }}
  #         POSTGRES_VERSION=15
  #         NODE_ENV=production
  #         EOF

  #         docker pull ghcr.io/${{ needs.build.outputs.lowercase_owner }}/devcanvas-config:latest
  #         docker create --name config-container ghcr.io/${{ needs.build.outputs.lowercase_owner }}/devcanvas-config:latest
  #         docker cp config-container:/docker-compose.prod.yml .
  #         docker rm config-container

  #         # Pull application images
  #         docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.backend_image }}:${{ env.TAG }} || \
  #           (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.backend_image }}:${{ env.TAG }})

  #         docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.frontend_image }}:${{ env.TAG }} || \
  #           (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.frontend_image }}:${{ env.TAG }})

  #         docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.ai_service_image }}:${{ env.TAG }} || \
  #           (sleep 30 && docker pull ${{ env.REGISTRY }}/${{ needs.build.outputs.ai_service_image }}:${{ env.TAG }})

  #         # Deploy
  #         export COMPOSE_PROJECT_NAME=devcanvas_prod
  #         docker-compose -f docker-compose.prod.yml down --remove-orphans
  #         docker-compose -f docker-compose.prod.yml up -d --build

  #         # Cleanup
  #         docker system prune -af --filter "label!=com.docker.compose.project=devcanvas_prod"