version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  backend:
    build:
      context: ./devcanvas-api
      target: ${TARGET:-development} # Default to development
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?schema=public
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - app-network
    volumes:
      - ./devcanvas-api:/usr/src/app  # Mount source code
      - /usr/src/app/node_modules     # Keep node_modules isolated

  frontend:
    build:
      context: ./devcanvas-frontend
      target: development
    ports:
      - "3001:3001"
    volumes:
      - ./devcanvas-frontend:/app  # Mount source code
      - /app/node_modules          # Keep node_modules isolated
    environment:
      - CHOKIDAR_USEPOLLING=true   # Enable file watching in Docker
      - WDS_SOCKET_PORT=3001       # Webpack Dev Server socket port
    stdin_open: true               # Required for React
    tty: true                      # Required for React

  # python-service:
  #   build: ./python-microservice
  #   networks:
  #     - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge