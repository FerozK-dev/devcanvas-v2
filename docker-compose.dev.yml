services:
  traefik:
    image: traefik:v3.3.3
    command:
      - "--configFile=/app/configs/traefik.toml"
    volumes:
      - ./traefik/traefik.toml:/app/configs/traefik.toml:ro
      - ./traefik/dynamic_conf.toml:/app/configs/dynamic_conf.toml:ro
      - ./traefik/certs:/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"
    environment:
      - TZ=Europe/Helsinki
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(`postgres.localhost`)"
      - "traefik.http.routers.postgres.entrypoints=websecure"
      - "traefik.http.routers.postgres.tls=true"
      - "traefik.http.services.postgres.loadbalancer.server.port=5432"
    networks:
      - app-network

  backend:
    build:
      context: ./devcanvas-api
      dockerfile: Dockerfile.dev
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?schema=public
      - JWT_SECRET={JWT_SECRET}
      - STORAGE_TYPE=${STORAGE_TYPE}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - SITE_URL=${SITE_URL}
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./devcanvas-api:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`backend.localhost`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
    networks:
      - app-network

  frontend:
    build:
      context: ./devcanvas-frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./devcanvas-frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3001"
    networks:
      - app-network
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile.dev
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONFAULTHANDLER=1
      - PYTHONDEVMODE=1
      - AI_DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@localhost:5432/${DB_NAME}
      - JWT_SECRET={JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
    volumes:
      - ./ai-service:/app
      - /app/.venv
    ports:
      - "5000:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-service.rule=Host(`ai.localhost`)"
      - "traefik.http.routers.ai-service.entrypoints=websecure"
      - "traefik.http.routers.ai-service.tls=true"
      - "traefik.http.services.ai-service.loadbalancer.server.port=80"
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
